<table id="table-history" class="table text-center">
	<thead>
		<th style="width: 30%"></th>
		<th>P1</th>
		<th>P2</th>
		<th></th>
	</thead>
	<tbody></tbody>
</table>
<template id="history-row">
	<tr>
		<td class="history-date"></td>
		<td class="history-p1"></td>
		<td class="history-p2"></td>
		<td><button class="history-show btn btn-sm btn-primary">Voir</button></td>
	</tr>
</template>
<script type="module">
	import { showModal } from "./script.js";
	import { canvasInterface } from "./lib/class/ClientP4.js";
	const container = document.querySelector("#table-history tbody");
	const template = document.getElementById("history-row");
	fetch("api/history")
		.then((response) => response.json())
		.then((games) => {
			for (const game of games) {
				const fragment = template.content.cloneNode(true);
				fragment.querySelector(".history-date").innerText = new Date(game.time).toLocaleDateString("fr-FR");

				const p1 = fragment.querySelector(".history-p1");
				p1.innerText = game.name_1;
				const p2 = fragment.querySelector(".history-p2");
				p2.innerText = game.name_2;
				const [win, loose] = game.result == 1 ? [p1, p2] : [p2, p1];
				win.innerHTML = `<span class="badge text-bg-success">${win.innerText}</span>`;
				loose.innerHTML = `<span class="badge text-bg-danger">${loose.innerText}</span>`;

				fragment.querySelector(".history-show").addEventListener("click", (e) => {
					e.preventDefault();

					const canvas = document.createElement("canvas");
					const interf = new canvasInterface(canvas, null, { width: 460, static: true });
					for (let x = 0; x < game.board.length; x++) {
						for (let y = 0; y < game.board[x].length; y++) {
							const id = game.board[x][y];
							id && interf.draw(interf.getColor(id), x, y);
						}
					}
					showModal(`#${game.id}`, canvas);
				});
				container.appendChild(fragment);
			}
		});
</script>
